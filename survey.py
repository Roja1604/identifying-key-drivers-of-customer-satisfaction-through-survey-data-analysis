# -*- coding: utf-8 -*-
"""survey.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WOMJgS6MUPzaLa_v8k-PdwjjayyQqKub
"""

# Install any required packages (if needed)
!pip install seaborn

# Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import warnings
warnings.filterwarnings('ignore')

from google.colab import files
uploaded = files.upload()

# Load the CSV file
df = pd.read_csv('customer_satisfaction_survey.csv')

# Preview the dataset
df.head()
df.info()
df.describe()
df.isnull().sum()

# Plot distribution of target variable
sns.countplot(data=df, x='Satisfaction')
plt.title("Customer Satisfaction Distribution")
plt.show()

# Visualize missing data (if any)
sns.heatmap(df.isnull(), cbar=False, cmap='viridis')

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Set style for better visuals
sns.set_style("whitegrid")

# 1. Preview the dataset
print("="*50)
print("First 5 rows:")
print(df.head())

print("\n" + "="*50)
print("Dataset Info:")
print(df.info())

print("\n" + "="*50)
print("Statistical Summary:")
print(df.describe(include='all'))  # Include categorical & numerical

print("\n" + "="*50)
print("Missing Values:")
missing_data = df.isnull().sum()
print(missing_data[missing_data > 0])  # Only show columns with missing values

# 2. Plot distribution of target variable
plt.figure(figsize=(8, 5))
ax = sns.countplot(data=df, x='Satisfaction', palette="Set2")
plt.title("Customer Satisfaction Distribution", pad=20, fontsize=14)
plt.xlabel("Satisfaction Level", labelpad=10)
plt.ylabel("Count", labelpad=10)

# Add percentage labels
total = len(df)
for p in ax.patches:
    percentage = f'{100 * p.get_height()/total:.1f}%'
    x = p.get_x() + p.get_width() / 2
    y = p.get_height() + 0.02 * total
    ax.annotate(percentage, (x, y), ha='center')

plt.tight_layout()
plt.show()

# 3. Visualize missing data (if any)
if df.isnull().sum().sum() > 0:
    plt.figure(figsize=(10, 6))
    sns.heatmap(df.isnull(), cbar=False, cmap='viridis',
                yticklabels=False, alpha=0.7)
    plt.title("Missing Data Visualization", pad=20, fontsize=14)
    plt.tight_layout()
    plt.show()
else:
    print("\nNo missing values found in the dataset.")

plt.figure(figsize=(12,8))
sns.heatmap(df_scaled.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap")
plt.show()

X = df_scaled.drop('Satisfaction', axis=1)
y = df_scaled['Satisfaction']

rf_model = RandomForestRegressor()
rf_model.fit(X, y)

importances = pd.Series(rf_model.feature_importances_, index=X.columns)
importances.sort_values().plot(kind='barh', title='Feature Importance')
plt.xlabel('Importance Score')
plt.show()

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model (Linear Regression)
lr = LinearRegression()
lr.fit(X_train, y_train)
y_pred = lr.predict(X_test)

# Evaluation metrics
print("RÂ² Score:", r2_score(y_test, y_pred))
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))

# Top drivers based on feature importance
top_features = importances.sort_values(ascending=False)
print("Top 3 Key Drivers of Customer Satisfaction:")
print(top_features.head(3))